package rules.Ava;

import java.util.*;
import java.util.ArrayList;
import java.util.List;

import com.mindsmiths.armory.events.UserConnectedEvent
import com.mindsmiths.armory.events.SubmitEvent
import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.ruleEngine.util.Agents;
import com.mindsmiths.pairingalgorithm.Days;
import com.mindsmiths.pairingalgorithm.EmployeeAvailability;
import static com.mindsmiths.ruleEngine.util.DateUtil.evaluateCronExpression;

import agents.Ava;
import agents.CultureMaster;

import signals.EmployeeAvailabilitySignal;
import signals.SendMatchesSignal;
import signals.MatchingParametarsSignal;

import models.AvaLunchCycleStage;
import models.OnboardingStage;
import models.LunchReminderStage;


rule "Send available days email"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Ava(lunchCycleStage == AvaLunchCycleStage.LUNCH_MAIL_SENDING,
                   onboardingStage in (OnboardingStage.STATS_EMAIL, OnboardingStage.FINISHED))
        eval(evaluateCronExpression("* * 8-17 ? * WED *", ts, "Europe/Zagreb")
            || (agent.isManualTrigger() == true))
        employee: EmployeeProfile()
    then
        modify(agent) {
            setLunchCycleStage(AvaLunchCycleStage.FIND_AVAILABILITY),
            setLunchReminderStage(LunchReminderStage.FIRST_EMAIL_SENT)
        }
        agent.sendWeeklyEmail(employee);
end

rule "Send second reminder"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * * ? * THU *", ts, "Europe/Zagreb"))
        agent: Ava(
            (lunchReminderStage == LunchReminderStage.FIRST_EMAIL_SENT || lunchCycleStage == AvaLunchCycleStage.LUNCH_MAIL_SENDING),
            workingHours == true,
            isManualTrigger() == false
        )
        employee: EmployeeProfile() 
    then
        modify(agent) {
            setLunchCycleStage(AvaLunchCycleStage.FIND_AVAILABILITY),
            setLunchReminderStage(LunchReminderStage.SECOND_EMAIL_SENT)
        }
        agent.sendWeeklyEmail(employee);      
end

rule "Send third reminder"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 0-15 ? * FRI *", ts, "Europe/Zagreb")) 
        agent: Ava(
            (lunchReminderStage == LunchReminderStage.SECOND_EMAIL_SENT || lunchCycleStage == AvaLunchCycleStage.LUNCH_MAIL_SENDING),
            workingHours == true,
            isManualTrigger() == false
        )
        
        employee: EmployeeProfile()
    then
        modify(agent) {
            setLunchCycleStage(AvaLunchCycleStage.FIND_AVAILABILITY),
            setLunchReminderStage(LunchReminderStage.THIRD_EMAIL_SENT)
        }
        agent.sendWeeklyEmail(employee);
end

rule "Ask for available days"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(
            lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
            lunchReminderStage != LunchReminderStage.USER_RESPONDED
        )
        eval(evaluateCronExpression("* * 9-23 * * WED", ts, "Europe/Zagreb") 
            || (evaluateCronExpression("* * * * * THU", ts, "Europe/Zagreb"))
            || (evaluateCronExpression("* * 00-16 * * FRI", ts, "Europe/Zagreb"))
            || (agent.isManualTrigger() == true))
        employee: EmployeeProfile()
    then 
        agent.chooseAvailableDaysScreen();
        Log.info("Decaying connection strength neurons for: " + employee.getFullName());
        modify(agent) {
            decayConnectionNeurons(),
            setManualTrigger(false)
            };
        delete(signal);
end

rule "Reconnect ask for available days"
   when
        Heartbeat(ts: timestamp) from entry-point "signals"
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(
            lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
            lunchReminderStage != LunchReminderStage.USER_RESPONDED
        )
        eval(evaluateCronExpression("* * 9-23 * * WED", ts, "Europe/Zagreb") 
            || (evaluateCronExpression("* * * * * THU", ts, "Europe/Zagreb"))
            || (evaluateCronExpression("* * 00-16 * * FRI", ts, "Europe/Zagreb"))
            || (agent.isManualTrigger() == true))
   then
        agent.chooseAvailableDaysScreen();
        delete(signal);
end

rule "Confirm days"
    when
        signal: SubmitEvent(getParamAsString("submit") == "confirmDays") from entry-point "signals"  
        agent: Ava()
        employee: EmployeeProfile()
    then
        List<String> availableDays = (ArrayList<String>)signal.getParam("availableDays");
        if(availableDays.size() > 0)
            agent.confirmingDaysScreen();
        else
            agent.showLunchDeclineReasonScreens();

        modify(agent) {
            updateAvailableDays((availableDays)),
            setLunchCycleStage(AvaLunchCycleStage.ACCEPT_MATCH_INFO),
            setLunchReminderStage(LunchReminderStage.USER_RESPONDED)
        };

        agent.send(CultureMaster.ID, new EmployeeAvailabilitySignal(new EmployeeAvailability(employee.getId(), agent.getAvailableDays())));
        agent.send(CultureMaster.ID, new MatchingParametarsSignal(employee.getId(),
                                                                  agent.getConnectionStrengthAsValue(),
                                                                  agent.getMatchHistory()));
        delete(signal);
end

rule "Lunch decline reason screen"
    when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-lunch-decline-reason-screen") from entry-point "signals"
        agent: Ava(lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
                   lunchReminderStage != LunchReminderStage.USER_RESPONDED)
    then 
        agent.showLunchDeclineReasonScreens();
        delete(signal);
end

rule "Finish lunch decline form"
   when
        signal: SubmitEvent(getParamAsString("submit") == "finished-lunch-decline-form") from entry-point "signals"
        agent: Ava(lunchReminderStage != LunchReminderStage.USER_RESPONDED)
   then
        List<String> temp = agent.getLunchDeclineReasons();
        temp.add(signal.getParamAsString("answer"));
        modify(agent) {
            setLunchDeclineReasons(temp),
            setLunchReminderStage(LunchReminderStage.USER_RESPONDED)
        };
        delete(signal);
end

rule "Store match info"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        // UNCOMMENT AFTER TESTING
        // eval(evaluateCronExpression("* * 17-18 ? * FRI *", ts, "Europe/Zagreb")) 
        signal: SendMatchesSignal() from entry-point "signals"
        agent: Ava(lunchCycleStage == AvaLunchCycleStage.ACCEPT_MATCH_INFO)
        employee: EmployeeProfile()
    then
        modify(agent) {
            setMatch(signal.getMatch()), setMatchDay(signal.getMatchDay()),
            getMatchHistory().add(signal.getMatch())
        };
        Log.info("updated match history " + agent.getMatchHistory());
        agent.printMatchInfo(employee, signal);
        agent.sendCalendarInvite(signal.getMatchDay(), employee, agent.getOtherEmployees().get(agent.employeeToAvaId(signal.getMatch())));
        delete(signal);
end

rule "Auto assign days"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* 30-59 16 ? * FRI *", ts, "Europe/Zagreb")) // KOMENTAR
        agent: Ava(
            lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY
        )
        employee: EmployeeProfile()
    then
        modify(agent) {
            setLunchCycleStage(AvaLunchCycleStage.ACCEPT_MATCH_INFO),
            setLunchReminderStage(LunchReminderStage.USER_RESPONDED),
            setAvailableDays(new ArrayList<Days>() {{
                add(Days.MON);
                add(Days.TUE);
                add(Days.WED);
                add(Days.THU);
                add(Days.FRI);
            }});
        }
        agent.send(CultureMaster.ID, new EmployeeAvailabilitySignal(new EmployeeAvailability(agent.getId(), agent.getAvailableDays())));
end

rule "Reset Ava lunch cycle stage"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 8-17 ? * SUN *", ts, "Europe/Zagreb"))
        agent: Ava(lunchCycleStage == AvaLunchCycleStage.ACCEPT_MATCH_INFO)
    then
        modify(agent) {
            setLunchCycleStage(AvaLunchCycleStage.LUNCH_MAIL_SENDING)
        };
end

rule "User already declined or confirmed available days"
    when 
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-lunch-decline-reason-screen" || getParamAsString("trigger") == "start-weekly-core") from entry-point "signals" 
        agent: Ava(lunchReminderStage == LunchReminderStage.USER_RESPONDED)
    then
        agent.showUserAlreadyRespondedScreen();
        delete(signal);
end

rule "Lunch invite expired"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(!evaluateCronExpression("* * 9-23 * * WED", ts, "Europe/Zagreb") && 
            !evaluateCronExpression("* * * * * THU", ts, "Europe/Zagreb") &&
            !evaluateCronExpression("* * 00-14 * * FRI", ts, "Europe/Zagreb"))
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(
            lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
            onboardingStage == OnboardingStage.FINISHED,
            manualTrigger == false
        )
    then 
        agent.showLunchInviteExpiredScreen();
        delete(signal);
end