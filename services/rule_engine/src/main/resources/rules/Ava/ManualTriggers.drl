package rules.Ava;

import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.ruleEngine.util.Log;
import com.mindsmiths.employeeManager.ManualTriggerEvent;

import agents.Ava;

import models.AvaLunchCycleStage;
import models.OnboardingStage;

rule "Trigger lunch cycle for Ava"
    when
        signal: ManualTriggerEvent(triggerType == "lunch_cycle") from entry-point "signals"
        agent: Ava(
            lunchCycleStage == AvaLunchCycleStage.LUNCH_MAIL_SENDING,
            onboardingStage == OnboardingStage.STATS_SENT
            )
        employee: EmployeeProfile()
    then
        Log.info("Ava: triggered lunch cycle from dashboard");
        modify(agent) {
            setLunchCycleStage(AvaLunchCycleStage.FIND_AVAILABILITY),
            setManualTrigger(true)            
        };
        agent.sendWeeklyEmail(employee);
        delete(signal);            
end

rule "Trigger lunch pairing for Ava"
    when
        signal: ManualTriggerEvent(triggerType == "lunch_pairing") from entry-point "signals"
        agent: Ava()
    then
        Log.info("Ava: triggered lunch pairing from dashboard");
        delete(signal);        
end

rule "Trigger familiarity quiz"
    when
        signal: ManualTriggerEvent(triggerType == "familiarity_quiz") from entry-point "signals"
        agent: Ava()
    then
        Log.info("Ava: triggered familiarity quiz from dashboard");
        // trigger quiz
end

rule "Trigger statistics email"
    when
        signal: ManualTriggerEvent(triggerType == "statistics_email") from entry-point "signals"
        agent: Ava(onboardingStage == OnboardingStage.FINISHED)
        employee: EmployeeProfile()
    then
        Log.info("Ava: triggered statistics email from dashboard");
        agent.sendStatisticsEmail(employee);
        modify(agent) {setOnboardingStage(OnboardingStage.STATS_SENT)};
end

rule "Ask for available days manually"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
                   onboardingStage == OnboardingStage.STATS_SENT,
                   manualTrigger == true)
    then 
        // what if person decides to exit this screen without answering, now we can't get back because we are in the next stage
        modify(agent) {
            setLunchCycleStage(AvaLunchCycleStage.FORWARD_AVAILABILITY),
            setManualTrigger(false)
        }
        agent.chooseAvailableDaysScreen();
        delete(signal);
end