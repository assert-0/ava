package rules.Ava;

import static com.mindsmiths.ruleEngine.util.DateUtil.evaluateCronExpression;
import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.ruleEngine.util.Log;
import com.mindsmiths.employeeManager.ManualTriggerEvent;

import agents.Ava;

import models.AvaLunchCycleStage;
import models.OnboardingStage;


rule "Set working hours"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 8-17 ? * MON,TUE,WED,THU,FRI *", ts, "Europe/Zagreb"))
        agent: Ava(workingHours != true)
    then
        modify(agent) {
            setWorkingHours(true)
        }
end

rule "Set non working hours"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(!evaluateCronExpression("* * 8-17 ? * MON,TUE,WED,THU,FRI *", ts, "Europe/Zagreb"))
        agent: Ava(workingHours != false)
    then
        modify(agent) {
            setWorkingHours(false)
        }
end

rule "Trigger lunch cycle"
    when
        signal: ManualTriggerEvent(triggerType == "lunch_cycle") from entry-point "signals"
        agent: Ava()
        employee: EmployeeProfile()
    then
        Log.info("Ava: triggered lunch cycle from dashboard");
        modify(agent) {setLunchCycleStage(AvaLunchCycleStage.FIND_AVAILABILITY),
                       setOnboardingStage(OnboardingStage.FINISHED)};
        agent.sendWeeklyEmail(employee);
        delete(signal);            
end

rule "Trigger familiarity quiz"
    when
        signal: ManualTriggerEvent(triggerType == "familiarity_quiz") from entry-point "signals"
        agent: Ava()
    then
        Log.info("Ava: triggered familiarity quiz from dashboard");
        // trigger quiz
end