package rules.Ava;

import com.mindsmiths.ruleEngine.util.Log;
import com.mindsmiths.ruleEngine.util.Agents;
import com.mindsmiths.ruleEngine.model.Initialize;

import com.mindsmiths.armory.events.UserConnectedEvent;
import com.mindsmiths.armory.events.SubmitEvent;

import com.mindsmiths.sdk.utils.templating.*;

import com.mindsmiths.employeeManager.employees.Employee;

import agents.Ava;
import agents.CultureMaster;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import models.OnboardingStage;
import signals.AllEmployees;
import models.AvaLunchCycleStage;

import signals.AvaAvailabilitySignal;
import signals.EmployeeUpdateSignal;

import models.EmployeeProfile;
import models.OnboardingStage;


rule "Send welcome email"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Ava(
            workingHours == true,
            onboardingStage == null
        )
        employee: EmployeeProfile()
    then
        agent.sendWelcomeEmail(employee);
        modify(agent) {
            setOnboardingStage(OnboardingStage.EMAIL_SENT)
        };
end

rule "Start and reconnect personal quiz"
   when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-onboarding") from entry-point "signals"
        agent: Ava(onboardingStage in (OnboardingStage.EMAIL_SENT, OnboardingStage.PERSONAL_QUIZ))
   then
        agent.showPersonalQuizScreens();
        modify(agent) {
            setOnboardingStage(OnboardingStage.PERSONAL_QUIZ)
        };
        delete(signal);
end

rule "Start familiarity quiz"
   when
        signal: SubmitEvent(getParamAsString("submit") == "finished-personal-quiz") from entry-point "signals"
        agent: Ava(onboardingStage == OnboardingStage.PERSONAL_QUIZ)
        employee: EmployeeProfile()
   then
        Map<String, String> personalAnswers = new HashMap<String, String>(
            employee.getPersonalAnswers()
        );
        for (String paramId : signal.getParams().keySet())
            if (paramId.startsWith("answers"))
                personalAnswers.put(
                    paramId.replace("answers", "question"),
                    signal.getParamAsString(paramId)
                );
        modify(employee) { setPersonalAnswers(personalAnswers) };

        agent.showFamiliarityQuizScreens();
        modify(agent) {
            setOnboardingStage(OnboardingStage.FAMILIARITY_QUIZ)
        };
        delete(signal);
end

rule "Reconnect familiarity quiz"
   when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-onboarding") from entry-point "signals"
        agent: Ava(onboardingStage == OnboardingStage.FAMILIARITY_QUIZ)
   then
        agent.showFamiliarityQuizScreens();
        delete(signal);
end

rule "Finish onboarding"
   when
        Heartbeat(ts: timestamp) from entry-point "signals"
        signal: SubmitEvent(getParamAsString("submit") == "finished-familiarity-quiz") from entry-point "signals"
        agent: Ava(onboardingStage == OnboardingStage.FAMILIARITY_QUIZ)
        employee: EmployeeProfile()
   then
        Map<String, Double> familiarity = new HashMap<String, Double>(
            employee.getFamiliarity()
        );
        for (String paramId : signal.getParams().keySet()) 
            if (paramId.startsWith("answers")) {
                for (String em : (List<String>) signal.getParam(paramId)) {
                    familiarity.put(
                        em, familiarity.getOrDefault(em, 0.0) + 1.0
                    );
                }
                
            }
        modify(employee) { setFamiliarity(familiarity) };

        agent.sendStatisticsEmail(employee);

        modify(agent) {
            setOnboardingStage(OnboardingStage.FINISHED),
            setLunchCycleStage(AvaLunchCycleStage.LUNCH_MAIL_SENDING),
            setStatsEmailLastSentAt(ts)
        };
        delete(signal);
end

rule "Reconnect final screen"
   when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-onboarding") from entry-point "signals"
        agent: Ava(onboardingStage == OnboardingStage.FINISHED)
   then
        agent.showFinalScreen();
        delete(signal);
end
