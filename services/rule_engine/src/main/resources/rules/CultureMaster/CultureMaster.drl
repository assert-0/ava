package rules.CultureMaster;

import agents.CultureMaster;
import signals.NumOfSilosSignal;
import signals.SilosInfoSignal;
import signals.EmployeeUpdateSignal;
import com.mindsmiths.employeeManager.ManualTriggerEvent;
import com.mindsmiths.ruleEngine.util.Log;


rule "Add or update Ava data"
    when
        signal: EmployeeUpdateSignal() from entry-point "signals"
        agent: CultureMaster()
    then
        modify(agent) {
            addOrUpdateEmployee(signal),
            sendEmployeesToAva()
        };
        Log.info("Added new Ava: " + signal.getEmployee());
        delete(signal);
end

rule "Trigger lunch cycle"
    when
        signal: ManualTriggerEvent(triggerType == "lunch_cycle") from entry-point "signals"
        agent: CultureMaster()
    then
        Log.info("CultureMaster: triggered lunch cycle from dashboard");
        // trigger lunch cycle
end

rule "Trigger lunch pairing"
    when
        signal: ManualTriggerEvent(triggerType == "lunch_pairing") from entry-point "signals"
        agent: CultureMaster()
    then
        Log.info("CultureMaster: triggered lunch pairing from dashboard");
        // trigger lunch pairing
end

rule "Trigger familiarity quiz"
    when
        signal: ManualTriggerEvent(triggerType == "familiarity_quiz") from entry-point "signals"
        agent: CultureMaster()
    then
        Log.info("CultureMaster: triggered familiarity quiz from dashboard");
        // trigger quiz
end

rule "Send number of silos"
    when
        signal: NumOfSilosSignal() from entry-point "signals"
        agent: CultureMaster()
    then
        agent.send(signal.getId(), new SilosInfoSignal(agent.calculateSilosCount()));
        delete(signal);
end
