package rules.CultureMaster;

import com.mindsmiths.ruleEngine.util.Log;
import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.ruleEngine.util.Agents;
import com.mindsmiths.ruleEngine.model.Initialize;
import com.mindsmiths.pairingalgorithm.Result;

import signals.NewAvaRegistered;
import signals.RequestAvailableDays;
import signals.SendAvailableDays;

import agents.CultureMaster;

import java.util.Date;


rule "First contact"
    salience 100
    when
        initialize: Initialize() from entry-point "agent-created"
        agent: CultureMaster()
    then
        Log.info("Created new CultureMaster agent.");
end

rule "Add New Ava"
    when
        signal: NewAvaRegistered() from entry-point "signals"
        agent: CultureMaster()
    then
        modify(agent) {addNewAva(signal.getAvaId())};
        delete(signal);
end

rule "Request Availability Data"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: CultureMaster(lastRequestDataTime before[10s] ts, sentCollect == false)
    then
        modify(agent) {setLastRequestDataTime(new Date()), clearAvailabilityList(), setSentCollect(true)};
        Log.info("Requesting availability data.......");

        for (String ava : agent.getAvaIDs()) {
            Log.info("Requesting from " + ava);
            agent.send(ava, new RequestAvailableDays());

        }
end

rule "Accept Availability Data"
    when
        signal: SendAvailableDays() from entry-point "signals"
        agent: CultureMaster()
    then
        Log.info("Got some data :)");
        modify(agent) {addAgentAvailableDays(signal.getAgentAvailableDays())};
        // we can generate new pairs only when we have info from all Avas
        if(agent.getAvaIDs().size() == agent.getAvailabilityList().size()) {
            modify(agent) {setCanGenerate(true)};
        }
        delete(signal);
end



rule "Generate This Weeks Pairs"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: CultureMaster(canGenerate == true, sentGenerate == false)
    then
        Log.info("Generating pairs....");
        Log.info("AvaIDs List: " + agent.getAvaIDs());
        Log.info("Availability List: " + agent.getAvailabilityList());
        modify(agent) {setCanGenerate(false)};
        agent.generatePairs();
end

rule "Accept Generated Pairs"
    when
        finalPairs: Result() from entry-point "signals"
        agent: CultureMaster()
    then
        modify(agent) {addFinalPairs(finalPairs.getResult()), setSendGenerated(true)};
        Log.info("---------------------rezultati pairinga---------------------");
        Log.info(finalPairs.getResult());
        delete(finalPairs);
end

rule "Give Match Info To Avas"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: CultureMaster(sendGenerated == true)
    then
        modify(agent) {setSendGenerated(false), giveMatchInfo()}
end


