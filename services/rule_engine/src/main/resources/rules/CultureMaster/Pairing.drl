package rules.CultureMaster;

import java.util.Date;

import com.mindsmiths.ruleEngine.util.Log;
import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.ruleEngine.util.Agents;
import com.mindsmiths.ruleEngine.model.Initialize;
import com.mindsmiths.pairingalgorithm.AllMatches;
import signals.NewAvaRegistered;
import signals.RequestAvailableDays;
import signals.SendAvailableDays;
import agents.CultureMaster;


rule "First contact"
    salience 100
    when
        initialize: Initialize() from entry-point "agent-created"
        agent: CultureMaster()
    then
        Log.info("Created new CultureMaster agent.");
end

rule "Add New Ava"
    when
        signal: NewAvaRegistered() from entry-point "signals"
        agent: CultureMaster()
    then
        modify(agent) {addNewAva(signal.getAvaId())};
        delete(signal);
end

rule "Request Availability Data"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: CultureMaster(lastRequestDataTime before[10s] ts, sentCollect == false)
    then
        modify(agent) {setLastRequestDataTime(new Date()), clearAvaAvailabilities(), setSentCollect(true)};
        Log.info("Requesting availability data.......");

        for (String ava : agent.getAvaIDs()) {
            Log.info("Requesting from " + ava);
            agent.send(ava, new RequestAvailableDays());
        }
end

rule "Accept Availability Data"
    when
        signal: SendAvailableDays() from entry-point "signals"
        agent: CultureMaster()
    then
        Log.info("Got some data :)");
        modify(agent) {addAvaAvailability(signal.getAvaAvailability())};
        // we can generate new pairs only when we have info from all Avas
        if(agent.getAvaIDs().size() == agent.getAvaAvailabilities().size()) {
            modify(agent) {setCanGenerate(true)};
        }
        delete(signal);
end



rule "Generate This Weeks Matches"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: CultureMaster(canGenerate == true, sentGenerate == false)
    then
        Log.info("Generating matches....");
        Log.info("AvaIDs List: " + agent.getAvaIDs());
        Log.info("Availability List: " + agent.getAvaAvailabilities());
        modify(agent) {setCanGenerate(false)};
        agent.generateMatches();
end

rule "Accept Generated Pairs"
    when
        matches: AllMatches() from entry-point "signals"
        agent: CultureMaster()
    then
        modify(agent) {addMatches(matches.getAllMatches()), setSendGenerated(true)};
        Log.info("---------------------rezultati pairinga---------------------");
        Log.info(matches.getAllMatches());
        delete(matches);
end

rule "Send Match Info To Avas"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: CultureMaster(sendGenerated == true)
    then
        modify(agent) {setSendGenerated(false), sendMatchInfo()}
end


