package rules.ava;

import java.util.HashMap;
import java.util.Map;
import com.mindsmiths.ruleEngine.util.Log;
import com.mindsmiths.employeeManager.employees.Employee;
import com.mindsmiths.sdk.utils.Utils;
import com.mindsmiths.ruleEngine.util.Agents;

import signals.EmployeeUpdateSignal;
import signals.AllEmployees;

import agents.CultureMaster;
import agents.Ava;

import models.EmployeeProfile;
import models.OnboardingStage;

rule "Create new employee"
    when
        newEmployee: Employee() from entry-point "signals"
        agent: Ava(onboardingStage == null)
    then
        delete(newEmployee);
        modify(agent) {
            addConnection("email", newEmployee.getEmail()),
            addConnection("armory", Utils.randomGenerator()),
             setOnboardingStage(OnboardingStage.AVA_CREATED)
        };
        EmployeeProfile profile = new EmployeeProfile(newEmployee);
        insert(profile);
        agent.send(CultureMaster.ID, new EmployeeUpdateSignal(profile));
end

rule "Update existing employee"
    when
        newEmployee: Employee() from entry-point "signals"
        profile: EmployeeProfile()
        agent: Ava(onboardingStage != null)
    then
        delete(newEmployee);
        modify(agent) {addConnection("email", newEmployee.getEmail())};
        modify(profile) {
            setFirstName(newEmployee.getFirstName()),
            setLastName(newEmployee.getLastName()),
            setEmail(newEmployee.getEmail()),
            setActive(newEmployee.getActive())
        };
        agent.send(CultureMaster.ID, new EmployeeUpdateSignal(profile));
end

rule "Save or update all employees"
    when
        signal: AllEmployees(allEmployees: allEmployees) from entry-point "signals"
        agent: Ava()
    then
        allEmployees.remove(agent.getId());
        modify (agent) {
            setOtherEmployees(allEmployees),
            addConnectionStrengths(),
            setSilosCount(signal.getSilosCount())
        };
        delete(signal);
end