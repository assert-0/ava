package rules.ava;

import com.mindsmiths.employeeManager.ManualTriggerEvent;
import com.mindsmiths.emailAdapter.SendEmailPayload;

import agents.Ava;
import agents.CultureMaster;

import models.AvaLunchCycleStage;
import models.OnboardingStage
import models.EmployeeProfile;
import models.OnboardingTemplates;
import models.MonthlyCoreTemplates;

import signals.MatchingParametersSignal;

rule "Trigger onboarding"
    when
        signal: ManualTriggerEvent(triggerType == "onboarding") from entry-point "signals"
        agent: Ava()
        employee: EmployeeProfile(familiarity: familiarity)
    then
        SendEmailPayload email = new OnboardingTemplates().welcomeEmail(
                employee,
                agent.getConnection("armory"),
                agent.getConnection("email"));
        agent.sendEmail(email);
        modify(agent) {setOnboardingStage(OnboardingStage.WELCOME_EMAIL_SENT)};
        modify(employee) {getFamiliarity().clear()};
        delete(signal);
end

rule "Trigger lunch cycle for Ava"
    when
        signal: ManualTriggerEvent(triggerType == "lunch_cycle") from entry-point "signals"
        agent: Ava(onboardingStage == OnboardingStage.FINISHED)
        employee: EmployeeProfile()
    then
        modify(agent) {
            setManualTrigger(true),
            setLunchCycleStage(AvaLunchCycleStage.LUNCH_MAIL_SENDING)};
        delete(signal);            
end

rule "Trigger monthly core"
    when
        signal: ManualTriggerEvent(triggerType == "monthly_core") from entry-point "signals"
        agent: Ava(monthlyCoreStage == null)
        employee: EmployeeProfile()
    then
        SendEmailPayload email = new MonthlyCoreTemplates().monthlyCoreEmail(
            employee,
            agent.getConnection("armory"),
            agent.getConnection("email"));
        agent.sendEmail(email);
        modify(agent) {setMonthlyCoreStage(MonthlyCoreStage.EMAIL_SENT)};
end

rule "Trigger charge neurons"
    when
        signal: ManualTriggerEvent(triggerType == "charge_neurons") from entry-point "signals"
        agent: Ava(onboardingStage == OnboardingStage.FINISHED)
        employee: EmployeeProfile()
    then
        modify(agent) {chargeConnectionNeurons(employee)};
        agent.send(CultureMaster.ID, new MatchingParametersSignal(
                employee.getId(),
                agent.getConnectionStrengthAsValue(),
                agent.getMatchHistory()));
        delete(signal);
end