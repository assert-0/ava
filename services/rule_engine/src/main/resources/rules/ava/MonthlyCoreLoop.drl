package rules.ava;

import com.mindsmiths.sdk.utils.templating.*;
import com.mindsmiths.ruleEngine.util.Agents;
import com.mindsmiths.ruleEngine.model.Initialize;
import com.mindsmiths.ruleEngine.util.Log;
import com.mindsmiths.employeeManager.employees.Employee;

import static com.mindsmiths.ruleEngine.util.DateUtil.evaluateCronExpression;

import agents.Ava;

import models.EmployeeProfile;
import models.MonthlyCoreStage
import com.mindsmiths.ruleEngine.model.Heartbeat
import com.mindsmiths.armory.events.UserConnectedEvent
import com.mindsmiths.armory.events.SubmitEvent
import java.util.Map
import java.util.HashMap
import java.util.List;


rule "Send monthly core email"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * * ? * 2#1 *", ts, "Europe/Zagreb"))
        agent: Ava(workingHours == true, monthlyCoreStage == null)
        employee: EmployeeProfile()
    then
        Log.info("Weekly core mail");
        agent.sendMonthlyCoreEmail(employee);
        modify(agent) {
            setMonthlyCoreStage(MonthlyCoreStage.EMAIL_SENT)
        };
end

rule "Start and reconnect Monthly quiz"
   when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-monthly-Core") from entry-point "signals"
        agent: Ava(monthlyCoreStage in (MonthlyCoreStage.EMAIL_SENT, MonthlyCoreStage.FAMILIARITY_QUIZ))
        employee: EmployeeProfile()
   then
        agent.showMonthlyQuizScreens();
        modify(agent) {
            setMonthlyCoreStage(MonthlyCoreStage.FAMILIARITY_QUIZ)
        };
        delete(signal);
end

rule "Finish monthly core"
   when
        Heartbeat(ts: timestamp) from entry-point "signals"
        signal: SubmitEvent(getParamAsString("submit") == "finish-monthly-quiz") from entry-point "signals"
        agent: Ava(monthlyCoreStage == MonthlyCoreStage.FAMILIARITY_QUIZ)
        employee: EmployeeProfile(familiarity : familiarity)
   then
        for (String paramId : signal.getParams().keySet()) 
            if (paramId.startsWith("answers"))
                for (String em : (List<String>) signal.getParam(paramId))
                    familiarity.put(em, (Double) familiarity.getOrDefault(em, 0.0) + 1.0);

        update(employee)
        modify(agent) {
            setMonthlyCoreStage(MonthlyCoreStage.FINISHED)
        };
        delete(signal);
end

rule "Reconnect monthly final screen"
   when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-monthly-core") from entry-point "signals"
        agent: Ava(monthlyCoreStage == MonthlyCoreStage.FINISHED)
   then
        agent.showFinalScreen();
        delete(signal);
end
